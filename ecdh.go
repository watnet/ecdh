package ecdh

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/subtle"
	"errors"
	"fmt"
	"io"

	"golang.org/x/crypto/curve25519"
)

const (
	// KeyLen is the length of a key generated by this package, be it
	// public or private.
	KeyLen = 32
)

var (
	ErrDataLen = errors.New("data length zero or not a multiple of the blocksize")
)

// From https://cr.yp.to/ecdh.html.
func clamp(key []byte) {
	key[0] &= 248
	key[31] &= 127
	key[31] |= 64
}

// grow increases the length of a byte slice by the given number of
// bytes, returning the index of the beginning of the new bytes and
// the modified slice.
func grow(s []byte, n int) (int, []byte) {
	start := len(s)
	s = append(s, make([]byte, n)...)
	return start, s
}

// PaddingLen returns the number of bytes of padding that will be
// generated for data of the given length when encrypting.
func PaddingLen(data int) int {
	return (aes.BlockSize - data%aes.BlockSize) % aes.BlockSize
}

// GenerateKey generates a new private key from the provided source of
// random bytes. If randsource is nil, crypto/rand.Reader is used.
func GenerateKey(randsource io.Reader) (priv []byte, err error) {
	if randsource == nil {
		randsource = rand.Reader
	}

	priv = make([]byte, KeyLen)
	_, err = io.ReadFull(randsource, priv)
	if err != nil {
		return nil, fmt.Errorf("generate private key: %w", err)
	}
	clamp(priv)

	return priv, nil
}

// PublicKey calculates a public key from a given private key.
func PublicKey(priv []byte) ([]byte, error) {
	return curve25519.X25519(priv, curve25519.Basepoint)
}

// Decrypt decrypts data using an AES key generated via ECDH from the
// provided public and private Ed25519 keys. It appends the result to
// out and returns the resulting slice.
func Decrypt(out, data, priv, pub []byte) ([]byte, error) {
	if len(data) == 0 || len(data)%aes.BlockSize != 0 {
		return nil, ErrDataLen
	}

	key, err := curve25519.X25519(priv, pub)
	if err != nil {
		return nil, fmt.Errorf("calculate key: %w", err)
	}

	c, err := aes.NewCipher(key)
	if err != nil {
		return nil, fmt.Errorf("create cipher: %w", err)
	}
	d := cipher.NewCBCDecrypter(c, data[:aes.BlockSize])

	data = data[aes.BlockSize:]

	start, out := grow(out, len(data))
	d.CryptBlocks(out[start:], data)

	return out, nil
}

// Encrypt encrypts data using an AES key generated via ECDH from the
// provided public and private Ed25519 keys. It appends the result to
// out and returns the resulting slice.
//
// The provided randsource is used to generate random data for the
// initial vector and for padding at the end of the data. If it is
// nil, crypto/rand.Reader is used.
func Encrypt(out, data, priv, pub []byte, randsource io.Reader) ([]byte, error) {
	if randsource == nil {
		randsource = rand.Reader
	}

	key, err := curve25519.X25519(priv, pub)
	if err != nil {
		return nil, fmt.Errorf("calculate key: %w", err)
	}

	pad := PaddingLen(len(data))
	start, out := grow(out, aes.BlockSize+len(data)+pad)
	_, err = io.ReadFull(randsource, out[start:start+aes.BlockSize])
	if err != nil {
		return nil, fmt.Errorf("generate IV: %w", err)
	}

	c, err := aes.NewCipher(key)
	if err != nil {
		return nil, fmt.Errorf("create cipher: %w", err)
	}
	d := cipher.NewCBCEncrypter(c, out[start:start+aes.BlockSize])

	if subtle.ConstantTimeEq(int32(pad), 0) == 0 {
		_, err := io.ReadFull(randsource, out[len(out)-pad:])
		if err != nil {
			return nil, fmt.Errorf("generate padding: %w", err)
		}
	}

	d.CryptBlocks(out[start+aes.BlockSize:], append(data, out[len(out)-pad:]...))

	return out, nil
}
